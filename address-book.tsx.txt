import { Sidebar } from "@/components/sidebar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Plus, Send, Trash2, Search } from "lucide-react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useWallet } from "@/hooks/use-wallet";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { addContactSchema, type AddContactData } from "@shared/schema";
import { useState } from "react";
import type { Contact } from "@shared/schema";

export default function AddressBook() {
  const { user } = useWallet();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [searchTerm, setSearchTerm] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const { data: contacts = [], isLoading } = useQuery<Contact[]>({
    queryKey: ["/api/contacts", user?.id],
    enabled: !!user?.id,
  });

  const form = useForm<AddContactData>({
    resolver: zodResolver(addContactSchema),
    defaultValues: {
      name: "",
      walletAddress: ""
    }
  });

  const addContactMutation = useMutation({
    mutationFn: async (data: AddContactData & { userId: string }) => {
      const response = await apiRequest("POST", "/api/contacts", data);
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Contact Added",
        description: "Contact has been added to your address book",
      });
      form.reset();
      setIsDialogOpen(false);
      queryClient.invalidateQueries({ queryKey: ["/api/contacts"] });
    },
    onError: (error) => {
      toast({
        title: "Failed to Add Contact",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const deleteContactMutation = useMutation({
    mutationFn: async ({ contactId, userId }: { contactId: string; userId: string }) => {
      const response = await apiRequest("DELETE", `/api/contacts/${contactId}`, { userId });
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Contact Deleted",
        description: "Contact has been removed from your address book",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/contacts"] });
    },
    onError: (error) => {
      toast({
        title: "Failed to Delete Contact",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: AddContactData) => {
    if (!user) {
      toast({
        title: "Wallet Required",
        description: "Please connect your wallet first",
        variant: "destructive",
      });
      return;
    }

    addContactMutation.mutate({ ...data, userId: user.id });
  };

  const handleDeleteContact = (contactId: string) => {
    if (!user) return;
    deleteContactMutation.mutate({ contactId, userId: user.id });
  };

  const filteredContacts = contacts.filter(contact =>
    contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    contact.walletAddress.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getInitials = (name: string) => {
    return name
      .split(" ")
      .map(word => word[0])
      .join("")
      .toUpperCase()
      .slice(0, 2);
  };

  const formatAddress = (address: string) => {
    return `${address.slice(0, 8)}...${address.slice(-6)}`;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background">
        <Sidebar />
        <div className="flex-1 lg:pl-64">
          <main className="flex-1 overflow-y-auto">
            <div className="p-4 lg:p-8">
              <div className="mb-8">
                <h1 className="text-3xl font-bold text-foreground">Address Book</h1>
                <p className="text-muted-foreground mt-1">Manage your saved contacts</p>
              </div>
              <Card>
                <CardContent className="p-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {[1, 2, 3, 4, 5, 6].map((i) => (
                      <div key={i} className="p-4 border rounded-lg animate-pulse">
                        <div className="flex items-center space-x-3 mb-3">
                          <div className="w-12 h-12 bg-muted rounded-full"></div>
                          <div className="flex-1 space-y-2">
                            <div className="h-4 bg-muted rounded w-24"></div>
                            <div className="h-3 bg-muted rounded w-32"></div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </main>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <Sidebar />
      
      <div className="flex-1 lg:pl-64">
        <main className="flex-1 overflow-y-auto">
          <div className="p-4 lg:p-8">
            <div className="mb-8">
              <h1 className="text-3xl font-bold text-foreground" data-testid="page-title">
                Address Book
              </h1>
              <p className="text-muted-foreground mt-1">
                Manage your saved contacts
              </p>
            </div>

            <Card data-testid="address-book-card">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Contacts ({filteredContacts.length})</CardTitle>
                  <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                    <DialogTrigger asChild>
                      <Button data-testid="button-add-contact">
                        <Plus className="mr-2 h-4 w-4" />
                        Add Contact
                      </Button>
                    </DialogTrigger>
                    <DialogContent data-testid="dialog-add-contact">
                      <DialogHeader>
                        <DialogTitle>Add New Contact</DialogTitle>
                      </DialogHeader>
                      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                        <div>
                          <Label htmlFor="name">Name</Label>
                          <Input
                            id="name"
                            placeholder="Enter contact name"
                            {...form.register("name")}
                            data-testid="input-contact-name"
                          />
                          {form.formState.errors.name && (
                            <p className="text-sm text-destructive mt-1">
                              {form.formState.errors.name.message}
                            </p>
                          )}
                        </div>
                        <div>
                          <Label htmlFor="walletAddress">Wallet Address</Label>
                          <Input
                            id="walletAddress"
                            placeholder="Enter wallet address"
                            {...form.register("walletAddress")}
                            data-testid="input-contact-address"
                          />
                          {form.formState.errors.walletAddress && (
                            <p className="text-sm text-destructive mt-1">
                              {form.formState.errors.walletAddress.message}
                            </p>
                          )}
                        </div>
                        <div className="flex space-x-2">
                          <Button 
                            type="submit" 
                            disabled={addContactMutation.isPending}
                            className="flex-1"
                            data-testid="button-save-contact"
                          >
                            {addContactMutation.isPending ? "Saving..." : "Save Contact"}
                          </Button>
                          <Button 
                            type="button" 
                            variant="outline"
                            onClick={() => setIsDialogOpen(false)}
                            data-testid="button-cancel-contact"
                          >
                            Cancel
                          </Button>
                        </div>
                      </form>
                    </DialogContent>
                  </Dialog>
                </div>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search contacts..."
                    className="pl-10"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    data-testid="input-search-contacts"
                  />
                </div>
              </CardHeader>
              <CardContent>
                {filteredContacts.length === 0 ? (
                  <div className="text-center py-12" data-testid="no-contacts">
                    <Plus className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-medium text-foreground mb-2">
                      {searchTerm ? "No contacts found" : "No contacts yet"}
                    </h3>
                    <p className="text-muted-foreground mb-4">
                      {searchTerm 
                        ? "Try adjusting your search terms" 
                        : "Add contacts to send money quickly"
                      }
                    </p>
                    {!searchTerm && (
                      <Button onClick={() => setIsDialogOpen(true)} data-testid="button-add-first-contact">
                        <Plus className="mr-2 h-4 w-4" />
                        Add Your First Contact
                      </Button>
                    )}
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {filteredContacts.map((contact, index) => (
                      <div 
                        key={contact.id} 
                        className="p-4 border border-border rounded-lg hover:shadow-md transition-shadow"
                        data-testid={`contact-card-${index}`}
                      >
                        <div className="flex items-center space-x-3 mb-3">
                          <Avatar className="w-12 h-12">
                            <AvatarFallback className="bg-primary text-primary-foreground font-semibold">
                              {getInitials(contact.name)}
                            </AvatarFallback>
                          </Avatar>
                          <div className="flex-1 min-w-0">
                            <h3 className="font-semibold text-foreground truncate" data-testid={`contact-name-${index}`}>
                              {contact.name}
                            </h3>
                            <p className="text-sm text-muted-foreground truncate" data-testid={`contact-address-${index}`}>
                              {formatAddress(contact.walletAddress)}
                            </p>
                          </div>
                        </div>
                        <div className="flex space-x-2">
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="flex-1"
                            data-testid={`button-send-to-${index}`}
                          >
                            <Send className="mr-2 h-4 w-4" />
                            Send
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => handleDeleteContact(contact.id)}
                            disabled={deleteContactMutation.isPending}
                            data-testid={`button-delete-${index}`}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </main>
      </div>
    </div>
  );
}

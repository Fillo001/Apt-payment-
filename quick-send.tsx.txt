import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ArrowRight, Users } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { sendPaymentSchema, type SendPaymentData } from "@shared/schema";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useWallet } from "@/hooks/use-wallet";
import { useToast } from "@/hooks/use-toast";
import { Link } from "wouter";

export function QuickSend() {
  const { user } = useWallet();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const form = useForm<SendPaymentData>({
    resolver: zodResolver(sendPaymentSchema),
    defaultValues: {
      toAddress: "",
      amount: "",
      currency: "USDC",
      note: ""
    }
  });

  const sendMutation = useMutation({
    mutationFn: async (data: SendPaymentData & { userId: string }) => {
      const response = await apiRequest("POST", "/api/transactions", data);
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Payment Sent",
        description: "Your payment has been submitted successfully",
      });
      form.reset();
      queryClient.invalidateQueries({ queryKey: ["/api/transactions"] });
    },
    onError: (error) => {
      toast({
        title: "Payment Failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: SendPaymentData) => {
    if (!user) {
      toast({
        title: "Wallet Required",
        description: "Please connect your wallet first",
        variant: "destructive",
      });
      return;
    }

    sendMutation.mutate({ ...data, userId: user.id });
  };

  const estimatedFee = 0.002;
  const amount = parseFloat(form.watch("amount") || "0");
  const total = amount + estimatedFee;

  return (
    <Card data-testid="quick-send-card">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle>Quick Send</CardTitle>
          <Link href="/send">
            <Button variant="ghost" size="sm" data-testid="button-view-all-send">
              View All <ArrowRight className="ml-1 h-4 w-4" />
            </Button>
          </Link>
        </div>
      </CardHeader>
      <CardContent>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="recipient">Recipient</Label>
              <div className="relative">
                <Input
                  id="recipient"
                  placeholder="Address or select from book"
                  {...form.register("toAddress")}
                  data-testid="input-recipient"
                />
                <Link href="/contacts">
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0"
                    data-testid="button-address-book"
                  >
                    <Users className="h-4 w-4" />
                  </Button>
                </Link>
              </div>
              {form.formState.errors.toAddress && (
                <p className="text-sm text-destructive mt-1">
                  {form.formState.errors.toAddress.message}
                </p>
              )}
            </div>
            <div>
              <Label htmlFor="amount">Amount</Label>
              <div className="relative">
                <Input
                  id="amount"
                  type="number"
                  step="0.01"
                  placeholder="0.00"
                  className="pr-20"
                  {...form.register("amount")}
                  data-testid="input-amount"
                />
                <div className="absolute right-2 top-1/2 transform -translate-y-1/2">
                  <Select
                    value={form.watch("currency")}
                    onValueChange={(value) => form.setValue("currency", value as "APT" | "USDC" | "USDT")}
                  >
                    <SelectTrigger className="w-16 h-6 border-none bg-transparent" data-testid="select-currency">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="USDC">USDC</SelectItem>
                      <SelectItem value="APT">APT</SelectItem>
                      <SelectItem value="USDT">USDT</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              {form.formState.errors.amount && (
                <p className="text-sm text-destructive mt-1">
                  {form.formState.errors.amount.message}
                </p>
              )}
            </div>
          </div>

          <div>
            <Label htmlFor="note">Note (Optional)</Label>
            <Input
              id="note"
              placeholder="Payment for..."
              {...form.register("note")}
              data-testid="input-note"
            />
          </div>

          <div className="bg-muted rounded-lg p-4">
            <div className="flex justify-between items-center text-sm">
              <span className="text-muted-foreground">Network Fee</span>
              <span className="font-medium text-foreground" data-testid="text-network-fee">
                ~${estimatedFee.toFixed(3)}
              </span>
            </div>
            <div className="flex justify-between items-center text-sm mt-1">
              <span className="text-muted-foreground">Total</span>
              <span className="font-semibold text-foreground" data-testid="text-total">
                ${total.toFixed(2)}
              </span>
            </div>
          </div>

          <Button 
            type="submit" 
            className="w-full" 
            disabled={sendMutation.isPending || !user}
            data-testid="button-send-payment"
          >
            {sendMutation.isPending ? "Sending..." : "Send Payment"}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}

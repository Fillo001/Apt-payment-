import { Sidebar } from "@/components/sidebar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { sendPaymentSchema, type SendPaymentData } from "@shared/schema";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useWallet } from "@/hooks/use-wallet";
import { useToast } from "@/hooks/use-toast";
import { AddressBookList } from "@/components/address-book-list";
import type { Contact } from "@shared/schema";

export default function SendMoney() {
  const { user } = useWallet();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const form = useForm<SendPaymentData>({
    resolver: zodResolver(sendPaymentSchema),
    defaultValues: {
      toAddress: "",
      amount: "",
      currency: "USDC",
      note: ""
    }
  });

  const sendMutation = useMutation({
    mutationFn: async (data: SendPaymentData & { userId: string }) => {
      const response = await apiRequest("POST", "/api/transactions", data);
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Payment Sent",
        description: "Your payment has been submitted successfully",
      });
      form.reset();
      queryClient.invalidateQueries({ queryKey: ["/api/transactions"] });
    },
    onError: (error) => {
      toast({
        title: "Payment Failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: SendPaymentData) => {
    if (!user) {
      toast({
        title: "Wallet Required",
        description: "Please connect your wallet first",
        variant: "destructive",
      });
      return;
    }

    sendMutation.mutate({ ...data, userId: user.id });
  };

  const handleSelectContact = (contact: Contact) => {
    form.setValue("toAddress", contact.walletAddress);
  };

  const estimatedFee = 0.002;
  const amount = parseFloat(form.watch("amount") || "0");
  const total = amount + estimatedFee;

  return (
    <div className="min-h-screen bg-background">
      <Sidebar />
      
      <div className="flex-1 lg:pl-64">
        <main className="flex-1 overflow-y-auto">
          <div className="p-4 lg:p-8">
            <div className="mb-8">
              <h1 className="text-3xl font-bold text-foreground" data-testid="page-title">
                Send Money
              </h1>
              <p className="text-muted-foreground mt-1">
                Send payments globally with low fees
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2">
                <Card data-testid="send-money-form">
                  <CardHeader>
                    <CardTitle>Send Payment</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                      <div>
                        <Label htmlFor="recipient">Recipient Address</Label>
                        <Input
                          id="recipient"
                          placeholder="Enter wallet address"
                          {...form.register("toAddress")}
                          data-testid="input-recipient-address"
                        />
                        {form.formState.errors.toAddress && (
                          <p className="text-sm text-destructive mt-1">
                            {form.formState.errors.toAddress.message}
                          </p>
                        )}
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="amount">Amount</Label>
                          <Input
                            id="amount"
                            type="number"
                            step="0.01"
                            placeholder="0.00"
                            {...form.register("amount")}
                            data-testid="input-amount"
                          />
                          {form.formState.errors.amount && (
                            <p className="text-sm text-destructive mt-1">
                              {form.formState.errors.amount.message}
                            </p>
                          )}
                        </div>
                        <div>
                          <Label htmlFor="currency">Currency</Label>
                          <Select
                            value={form.watch("currency")}
                            onValueChange={(value) => form.setValue("currency", value as "APT" | "USDC" | "USDT")}
                          >
                            <SelectTrigger data-testid="select-currency">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="USDC">USDC - USD Coin</SelectItem>
                              <SelectItem value="APT">APT - Aptos</SelectItem>
                              <SelectItem value="USDT">USDT - Tether</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <div>
                        <Label htmlFor="note">Note (Optional)</Label>
                        <Textarea
                          id="note"
                          placeholder="Add a note for this payment..."
                          {...form.register("note")}
                          data-testid="textarea-note"
                        />
                      </div>

                      <div className="bg-muted rounded-lg p-6">
                        <h3 className="font-semibold text-foreground mb-4">Payment Summary</h3>
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <span className="text-muted-foreground">Amount</span>
                            <span className="font-medium text-foreground" data-testid="summary-amount">
                              ${amount.toFixed(2)}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-muted-foreground">Network Fee</span>
                            <span className="font-medium text-foreground" data-testid="summary-fee">
                              ${estimatedFee.toFixed(3)}
                            </span>
                          </div>
                          <div className="border-t border-border pt-2">
                            <div className="flex justify-between">
                              <span className="font-semibold text-foreground">Total</span>
                              <span className="font-bold text-foreground" data-testid="summary-total">
                                ${total.toFixed(2)}
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>

                      <Button 
                        type="submit" 
                        className="w-full" 
                        disabled={sendMutation.isPending || !user}
                        size="lg"
                        data-testid="button-send-payment"
                      >
                        {sendMutation.isPending ? "Sending..." : "Send Payment"}
                      </Button>
                    </form>
                  </CardContent>
                </Card>
              </div>

              <div>
                <AddressBookList onSelectContact={handleSelectContact} />
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}
